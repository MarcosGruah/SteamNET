@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]
@using System.Text.Json
@using SteamNET.DataAccess.Models
@inject HttpClient client
@using Microsoft.AspNetCore.Components.QuickGrid

@if (user is not null && ownedGames is not null)
{
    <div class="card text-center col-3">
        <div class="card-header">
            @(user.SteamId)
        </div>
        <div class="card-body">
            <img src="@(user.AvatarFull)" class="card-img-top w-50" alt="...">
            <p class="card-text mt-3">@(user.PersonaName) is a Steam user since @(user.TimeCreatedSteam.ToLocalTime().ToShortDateString())</p>
            <a href="@(user.ProfileUrl)" target="_blank" class="btn btn-primary">Go to Steam Profile</a>
            <a href="@(user.ProfileUrl)" target="_blank" class="btn btn-primary">See owned games.</a>
        </div>
        <div class="card-footer text-body-secondary">
            Last Database Update: @(user.UpdatedAt.ToLocalTime())
        </div>
    </div>
    @if (allData is not null)
    {

        <div class="grid mt-3 col-6">
            <QuickGrid Items="@allData.AsQueryable()" Pagination="@pagination">
                <PropertyColumn Title="Game Name" Property="@(c => c.GameName)" Sortable="true" Class="game-name" IsDefaultSortColumn="true" />
                <PropertyColumn Title="Price" Property="@(c => ConvertedPrice(c.Price))" Format="C" Sortable="true" Align="Align.Right" />
                <PropertyColumn Title="Minutes Played" Property="@(c => c.MinutesPlayedForever)" Sortable="true" Class="game-name" />
            </QuickGrid>
            <Paginator State="@pagination" />

        </div>
    }
}

<form method="get" @onsubmit="SendRequest" class="mt-3">
    <AntiforgeryToken />
    <div class="mb-3 col-2">
        <label class="form-label">Steam ID</label>
        <InputText class="form-control" @bind-Value="steamId" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<button @onclick="SendRequestUpdate" class="btn btn-warning mt-2">@(buttonText)</button>

@code {
    private string? steamId;
    private UserModel? user;
    private IEnumerable<OwnedGameModel>? ownedGames;
    private List<GameModel> gameInfo = new();
    private IEnumerable<CombinedModel>? allData;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    private string buttonText = "Update game database.";
    protected async Task SendRequestUpdate()
    {
        try
        {
            buttonText = "Loading...";
            await client.GetAsync("https://localhost:7025/AppInfo/UpdateAppDatabase");
            buttonText = "Game database is up to date.";

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task SendRequest()
    {
        try
        {
            var apiUserResponseData = await client.GetFromJsonAsync<UserModel>($"https://localhost:7025/User/UserInfo/{steamId}", new JsonSerializerOptions(JsonSerializerDefaults.Web));

            if (apiUserResponseData is not null)
            {
                user = apiUserResponseData;
            }

            var apiOwnedGamesResponseData = await client.GetFromJsonAsync<IEnumerable<OwnedGameModel>>($"https://localhost:7025/User/UserOwnedGames/{steamId}", new JsonSerializerOptions(JsonSerializerDefaults.Web));

            if (apiOwnedGamesResponseData is not null)
            {
                ownedGames = apiOwnedGamesResponseData;

            }

            var apiAllGamesResponseData = await client.GetFromJsonAsync<List<GameModel>>("https://localhost:7025/games/getallgames", new JsonSerializerOptions(JsonSerializerDefaults.Web));

            if (apiAllGamesResponseData is not null)
            {
                gameInfo = apiAllGamesResponseData;
            }

            allData =
            from game in gameInfo
            join ownedGame in ownedGames
            on game.SteamAppId equals ownedGame.SteamAppId
            select new CombinedModel
                {
                    Id = game.Id,
                    GameName = game.GameName,
                    SteamAppId = game.SteamAppId,
                    IsFree = game.IsFree,
                    ShortDescription = game.ShortDescription,
                    Price = game.Price,
                    ImageUrl = game.ImageUrl,
                    GameUpdatedAt = game.UpdatedAt,
                    OwnedGameId = ownedGame.Id,
                    SteamUserId = ownedGame.SteamUserId,
                    MinutesPlayedForever = ownedGame.MinutesPlayedForever,
                    MinutesPlayed2Weeks = ownedGame.MinutesPlayed2Weeks,
                    OwnedGameUpdatedAt = ownedGame.UpdatedAt
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public double ConvertedPrice(int value)
    {

        // Move the last two digits to the decimal part
        double decimalPart = value % 100;
        double convertedPrice = (value / 100) + (decimalPart / 100);
        return convertedPrice;
    }

    public class CombinedModel
    {
        public Guid Id { get; set; }
        public string GameName { get; set; }
        public string SteamAppId { get; set; }
        public bool IsFree { get; set; }
        public string ShortDescription { get; set; }
        public int Price { get; set; }
        public string ImageUrl { get; set; }
        public DateTime GameUpdatedAt { get; set; }
        public Guid OwnedGameId { get; set; }
        public string SteamUserId { get; set; }
        public int MinutesPlayedForever { get; set; }
        public int MinutesPlayed2Weeks { get; set; }
        public DateTime OwnedGameUpdatedAt { get; set; }
    }

}